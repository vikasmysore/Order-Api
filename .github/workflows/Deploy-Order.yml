name: Build and Deploy Order API to Azure App Service

on:
  push:
    branches:
      - main
      - 'feature/*' 

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout the code
      - name: Checkout code
        uses: actions/checkout@v4

      # Step 2: Set up .NET SDK
      - name: Set up .NET SDK
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '8.0.x'

      # Step 3: Restore dependencies
      - name: Restore dependencies
        run: dotnet restore

      # Step 4: Build the application
      - name: Build application
        run: dotnet build --configuration Release

      # Step 5: Publish the application (Create the artifact)
      - name: Publish application
        run: dotnet publish --configuration Release --output ./output

      # Step 6: Upload the artifact to GitHub Packages
      - name: Upload artifact to GitHub Packages
        uses: actions/upload-artifact@v4
        with:
          name: order-api-artifact
          path: ./output

  deploy:
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main'

    steps:
      # Step 8: Download the artifact from GitHub Packages
      - name: Download artifact from GitHub Packages
        uses: actions/download-artifact@v4
        with:
          name: order-api-artifact
      
      # - name: Log in to Azure using federated Service Principal
      # - name: Azure Login
      #   uses: azure/login@v1
      #   with:
      #   creds: ${{ secrets.AZURE_CREDENTIALS }} 
      - name: 'Azure Login'
        uses: azure/login@v1
        with:
          enable-aad: true
          client-id: ${{ secrets.ARM_CLIENT_ID }}
          tenant-id: ${{ secrets.ARM_TENANT_ID }}
          subscription-id: ${{ secrets.ARM_SUBSCRIPTION_ID }}
          client-secret: ${{ secrets.ARM_CLIENT_SECRET }}

      # Step 9: Set up Azure Key Vault action to fetch secrets
      - name: Set up Azure Key Vault to fetch connection strings
        uses: azure/get-keyvault-secrets@v1
        with:
          keyvault: kvvikasdemoorderapi
        env:
          AZURE_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
          AZURE_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}
          AZURE_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}

      - name: Set environment variables
        run: |
          echo "SERVICE_BUS_CONNECTION_STRING=$(az keyvault secret show --name ServiceBusConnectionString --vault-name kvvikasdemoorderapi --query value -o tsv)" >> $GITHUB_ENV
          echo "COSMOS_DB_CONNECTION_STRING=$(az keyvault secret show --name CosmosDbConnectionString --vault-name kvvikasdemoorderapi --query value -o tsv)" >> $GITHUB_ENV

      # - name: Retrieve secret from Key Vault
      #   id: get-secret-sa-key
      #   uses: azure/cli@v2
      #   with:
      #     azcliversion: latest
      #     inlineScript: |
      #       # Variables  
      #       KEY_VAULT_NAME=kvvikasdemoorderapi  
      #       SERVICE_BUS_SECRET=ServiceBusConnectionString 
      #       COSMOS_DB_SECRET= CosmosDbConnectionString

      #       # Retrieve secret from Key Vault  
      #       SERVICE_BUS_KEY=$(az keyvault secret show --name $SERVICE_BUS_SECRET --vault-name $KEY_VAULT_NAME --query value -o tsv)
      #       COSMOS_DB_KEY=$(az keyvault secret show --name $COSMOS_DB_SECRET --vault-name $KEY_VAULT_NAME --query value -o tsv)

      #       # You can also set the retrieved secret as an output for use in subsequent steps in the workflow  
      #       echo "::set-output name=service_bus_value::$SERVICE_BUS_KEY"
      #       echo "::set-output name=cosmos_db_value::$COSMOS_DB_KEY"

      # Step 10: Fetch connection strings from Key Vault
      - name: Set environment variables for secrets
        run: |
          echo "SERVICE_BUS_CONNECTION_STRING=$(az keyvault secret show --name ServiceBusConnectionString --vault-name kvvikasdemoorderapi --query value -o tsv)" >> $GITHUB_ENV
          echo "COSMOS_DB_CONNECTION_STRING=$(az keyvault secret show --name CosmosDbConnectionString --vault-name kvvikasdemoorderapi --query value -o tsv)" >> $GITHUB_ENV

      # Step 11: Replace the connection strings in appsettings.json
      - name: Replace connection strings in appsettings.json
        run: |
          sed -i "s|\"ServiceBusConfiguration\": { \"ConnectionString\": \"[secret]\"}|\"ServiceBusConfiguration\": { \"ConnectionString\": \"$SERVICE_BUS_CONNECTION_STRING\" }|" ./output/appsettings.json
          sed -i "s|\"CosmosDbConfiguration\": { \"ConnectionString\": \"[secret]\"}|\"CosmosDbConfiguration\": { \"ConnectionString\": \"$COSMOS_DB_CONNECTION_STRING\" }|" ./output/appsettings.json

      # Step 12: Deploy to Azure App Service
      - name: Deploy to Azure App Service
        uses: azure/webapps-deploy@v2
        with:
          app-name: apsvcvikasdemoorderapi
          publish-profile: ${{ secrets.ARM_PUBLISH_PROFILE }}
          package: order-api-artifact/output
