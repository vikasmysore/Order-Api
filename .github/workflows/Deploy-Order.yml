name: Build and Deploy Order API to Azure App Service

on:
  push:
    branches:
      - main
      - 'feature/*' 

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout the code
      - name: Checkout code
        uses: actions/checkout@v4

      # Step 2: Set up .NET SDK
      - name: Set up .NET SDK
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '8.0.x'

      # Step 3: Restore dependencies
      - name: Restore dependencies
        run: dotnet restore

      # Step 4: Build the application
      - name: Build application
        run: dotnet build --configuration Release

      # Step 5: Publish the application (Create the artifact)
      - name: Publish application
        run: dotnet publish --configuration Release --output ./output

      - name: List contents of output directory
        run: ls -la ./output/

      # Step 6: Upload the artifact to GitHub Packages
      - name: Upload artifact to GitHub Packages
        uses: actions/upload-artifact@v4
        with:
          name: order-api-artifact
          path: ./output

  deploy:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    needs: build
    if: github.ref == 'refs/heads/main'

    steps:
      # Step 7: Download the artifact from GitHub Packages
      - name: Download artifact from GitHub Packages
        uses: actions/download-artifact@v4
        with:
          name: order-api-artifact
          path: ./output/
      
      - name: List contents of output directory after download
        run: ls -la ./output

      - name: Azure Login
        uses: azure/login@v1
        with:
          client-id: ${{ secrets.ARM_CLIENT_ID }}
          tenant-id: ${{ secrets.ARM_TENANT_ID }}
          subscription-id: ${{ secrets.ARM_SUBSCRIPTION_ID }}
          client-secret: ${{ secrets.ARM_CLIENT_SECRET }}

      # Step 8: Fetch connection strings from Key Vault
      - name: Fetch connection strings from Key Vault
        run: |
          SERVICE_BUS_CONNECTION_STRING=$(az keyvault secret show --name ServiceBusConnectionString --vault-name kvvikasdemoorderapi --query value -o tsv)
          COSMOS_DB_CONNECTION_STRING=$(az keyvault secret show --name CosmosDBConnectionString --vault-name kvvikasdemoorderapi --query value -o tsv)
          echo "SERVICE_BUS_CONNECTION_STRING fetched successfully"
          echo "COSMOS_DB_CONNECTION_STRING fetched successfully."
          echo "SERVICE_BUS_CONNECTION_STRING=$SERVICE_BUS_CONNECTION_STRING" >> $GITHUB_ENV
          if [ -z "$SERVICE_BUS_CONNECTION_STRING" ]; then
            echo "Service Bus connection string is empty. Please check your Key Vault configuration." >&2
            exit 1
          fi
          echo "COSMOS_DB_CONNECTION_STRING=$COSMOS_DB_CONNECTION_STRING" >> $GITHUB_ENV
          if [ -z "$COSMOS_DB_CONNECTION_STRING" ]; then
            echo "Cosmos DB connection string is empty. Please check your Key Vault configuration." >&2
            exit 1
          fi

      # Step 9: Replace the connection strings in appsettings.json
      - name: Replace connection strings in appsettings.json
        run: |
          sed -i "s|\"ServiceBusConfiguration\": { \"ConnectionString\": \"[secret]\" }|\"ServiceBusConfiguration\": { \"ConnectionString\": \"$SERVICE_BUS_CONNECTION_STRING\" }|" ./output/appsettings.json
          sed -i "s|\"CosmosDbConfiguration\": { \"ConnectionString\": \"[secret]\" }|\"CosmosDbConfiguration\": { \"ConnectionString\": \"$COSMOS_DB_CONNECTION_STRING\" }|" ./output/appsettings.json

      - name: Print contents of appsettings.json
        run: |
          cat ./output/appsettings.json

      # Step 10: Deploy to Azure App Service
      - name: Deploy to Azure App Service
        uses: azure/webapps-deploy@v2
        with:
          app-name: apsvcvikasdemoorderapi
          publish-profile: ${{ secrets.ARM_PUBLISH_PROFILE }}
          package: ./output
